//
//  MyAlertController.swift
//  0609ButtonDemo
//
//  Created by ByteDance on 2022/6/15.
//

import UIKit
import SnapKit

// 枚举类型，两个类型的弹出框
enum MyAlterControllerStyle {
    case actionSheet
    case alert
}

class MyAlterController: UIViewController {
    private let alterView = UIView()
    private let backGroundView = UIView()
    let stackView: UIStackView = UIStackView()
    var myStyle: MyAlterControllerStyle?
    var viewTitle: String?
    var viewMessage: String?
    var buttonTitle: String?
    var curBottom: ConstraintItem?
    var myButtonArray: [MyButton] = []
    var myButtonDict: [String: MyButton] = [:]
    
    var funcHandle: (()->())?
    
    let fullScreenSize = UIScreen.main.bounds.size
    
    // 视图加载
    override func viewDidLoad() {
        super.viewDidLoad()
        backGroundViewDidLoad()
        alterViewDidLoad()
        if let myStyle = myStyle {
            switch myStyle {
            case .actionSheet:
                setAlterSheetConstraints()
            case .alert:
                setAlterConstraints()
            }
        }
    }
    
    func myAddAction(buttonTitle: String?, funcHandle: (()->())?){
        self.buttonTitle = buttonTitle
        self.funcHandle = funcHandle
    }
    
    // 添加按钮
    func myAddButton(button: MyButton) {
        myButtonArray.append(button)
    }
    
    // 初始化函数
    init(title: String?, message: String?, style: MyAlterControllerStyle?) {
        super.init(nibName: nil, bundle: nil)
        self.viewTitle = title
        self.myStyle = style
        self.viewMessage = message
        self.buttonTitle = nil
        self.funcHandle = nil
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // 灰色背景加载
    func backGroundViewDidLoad() {
        backGroundView.backgroundColor = .gray
        backGroundView.alpha = 0.7
        view.addSubview(backGroundView)
        backGroundView.snp.makeConstraints { make in
            make.height.equalTo(view.snp.height)
            make.width.equalTo(view.snp.width)
        }
    }
    
    // 根据字符串创建Label
    func createTitleLabel(title: String) -> UILabel{
        let label = UILabel()
        label.text = title
        label.textAlignment = .center
        label.lineBreakMode = .byWordWrapping
        label.numberOfLines = 0
        return label
    }
    
    // 根据字符串创建圆角按钮
    func createRoundButton(title: String) -> UIButton {
        
        let button = UIButton()
        
        // 设置圆角
        button.layer.cornerRadius = 5
        button.layer.masksToBounds = true
        
        // 设置颜色和字体大小
        button.setTitleColor(.systemBlue, for: .normal)
        button.setTitle(title, for: .normal)
        
        button.addTarget(self, action: #selector(MyAlterController.setButtonDownStyle(_:)), for: .touchDown)
        button.addTarget(self, action: #selector(setButtonUpStyle(_:)), for: .touchUpInside)
        
        return button
    }
    
    // 设置弹窗外观
    func setAlterViewApperance() {
        // 圆角设置
        alterView.layer.cornerRadius = 10
        alterView.layer.masksToBounds = true
        // 白色
        alterView.backgroundColor = .white
        
        // 加入到view中
        view.addSubview(alterView)
    }
    
    // 设置弹窗约束
    func setAlterConstraints() {
        alterView.snp.makeConstraints { make in
            make.top.equalTo(fullScreenSize.height*0.3)
                //.lessThanOrEqualTo(<#T##other: ConstraintRelatableTarget##ConstraintRelatableTarget#>)
                //.greaterThanOrEqualTo(<#T##other: ConstraintRelatableTarget##ConstraintRelatableTarget#>)
                //.multipliedBy(0.3)
            make.left.equalTo(fullScreenSize.width*0.2)
            make.width.equalTo(fullScreenSize.width*0.6)
            make.bottom.equalTo(stackView.snp.bottom)
        }
    }
    
    // 设置底部弹窗约束
    func setAlterSheetConstraints() {
        alterView.snp.makeConstraints { make in
            make.left.equalTo(fullScreenSize.width*0.2)
            make.width.equalTo(fullScreenSize.width*0.6)
            make.bottom.equalTo(view.snp.bottom)
        }
    }
    
    
    // 弹窗界面加载
    func alterViewDidLoad() {
        setAlterViewApperance()
        // 添加stackview布局
        stackView.axis = .vertical //垂直方向布局
        alterView.addSubview(stackView)
        
        var curBottom = stackView.snp.top
        
        // 加入标题
        if let viewTitle = viewTitle {
            let titleLabel: UILabel = createTitleLabel(title: viewTitle)
            titleLabel.font = .systemFont(ofSize: 30)
            stackView.addArrangedSubview(titleLabel)
            curBottom = titleLabel.snp.bottom
        }
        
        // 加入message
        if let viewMessage = viewMessage {
            let messageLabel: UILabel = createTitleLabel(title: viewMessage)
            stackView.addArrangedSubview(messageLabel)
            
            curBottom = messageLabel.snp.bottom
        }
        
        // 加入按钮
        print(myButtonArray.count)
        
        // 有按钮就加入横线
        if myButtonArray.count > 0 {
            // 加入横线
            let line = UIView()
            line.backgroundColor = .darkGray
            stackView.addArrangedSubview(line)
            
            line.snp.makeConstraints { make in
                make.width.equalTo(alterView)
                make.height.equalTo(1)
            }
        }
        
        // 两个按钮要加入stakeview
        let horizontalStackView: UIStackView
        if myButtonArray.count == 2 {
            horizontalStackView =  UIStackView()
            horizontalStackView.axis = .horizontal
            stackView.addArrangedSubview(horizontalStackView)
            if let buttonTitle = myButtonArray[0].title {
                print(buttonTitle)
                let newButton = createRoundButton(title: buttonTitle )
                horizontalStackView.addArrangedSubview(newButton)
                myButtonDict[buttonTitle] = myButtonArray[0]
                newButton.snp.makeConstraints { make in
                    make.width.equalTo(horizontalStackView.snp.width).multipliedBy(0.5)
                }
            }
            let downline = UIView()
            downline.backgroundColor = .gray
            horizontalStackView.addArrangedSubview(downline)
            downline.snp.makeConstraints { make in
                make.width.equalTo(1)
            }
            if let buttonTitle = myButtonArray[1].title {
                print(buttonTitle)
                let newButton = createRoundButton(title: buttonTitle )
                horizontalStackView.addArrangedSubview(newButton)
                myButtonDict[buttonTitle] = myButtonArray[1]
            }
            curBottom = horizontalStackView.snp.bottom
        } else {
            // 循环添加按钮
            for button in myButtonArray {
                if let buttonTitle = button.title {
                    let newButton = createRoundButton(title: buttonTitle )
                    myButtonDict[buttonTitle] = button
                    stackView.addArrangedSubview(newButton)
                    curBottom = stackView.snp.bottom
                }
            }
        }
        
        stackView.snp.makeConstraints { make in
            make.center.equalTo(alterView)
            make.top.equalTo(alterView.snp.top)
            make.width.equalTo(alterView)
            make.bottom.equalTo(curBottom)
        }
        
    }
    
    func optionalFunctionExpecter(funcHandle: Void?) {
        if let funcHandle = funcHandle {
            funcHandle
        }
    }
    
    @objc
    func setButtonDownStyle(_ button: UIButton) {
        button.backgroundColor = .gray
    }
    
    @objc
    func setButtonUpStyle(_ button: UIButton) {
        if let title = button.title(for: .normal) {
            if let myButton = myButtonDict[title] {
                if let funcHandle = myButton.funcHandle {
                    funcHandle()
                }
            }
        }
        button.backgroundColor = .white
    }
}

class MyButton {
    var funcHandle: (()->())?
    var title: String?
    init(title: String?, funcHandle:(()->())?) {
        self.title = title
        self.funcHandle = funcHandle
    }
}
